{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/joao/Documents/_DEV/rocketseat/nlw/aulas/podcastrnext/src/pages/index.tsx\";\n// SPA (não usar quando as informações que serão obtidas com esta estratégia precisarem estar disponíveis assim que a página é exibida para o usuário; o Crawler não vai indexar isso) \n// SSR\n// SSG (utilizar quando deseja-se cacher a página no servidor (fazer uma versão estática do site no servidor)- performance; ex.: 1 milhão de pessoas acessa a mesma página no mesmo dia => cachear site no servidor uma vez por dia)\n// export default function Home() {\n//   useEffect( // SPA\n//     () => {\n//       fetch('http://localhost:3333/episodes')\n//         .then(response => response.json())\n//         .then(data => console.log(data))\n//     }, // o que fazer \n//     [] // quando; \"[]\" significa que a função vai ser executada assim que o componente for exibido em tela, uma única vez\n//   )\n//   return (\n//     <h1>Index</h1>\n//   )\n// }\nexport default function Home(props) {\n  console.log(props.episodes);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Index\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n} // SSR\n// export async function getServerSideProps() { // executa toda vez que alguém acessar a HOME (\"/\") da aplicação \n//   const response = await fetch('http://localhost:3333/episodes');\n//   const data = await response.json();\n//   return {\n//     props: { // o que é retornado aqui, é repassado para o componente function Home no argumento props\n//       episodes: data,\n//     }\n//   }\n// }\n// SSG \n\nexport async function getStaticProps() {\n  // executa toda vez que alguém acessar a HOME (\"/\") da aplicação \n  const response = await fetch('http://localhost:3333/episodes');\n  const data = await response.json();\n  return {\n    props: {\n      // o que é retornado aqui, é repassado para o componente function Home no argumento props\n      episodes: data\n    },\n    revalidate: 60 * 60 * 8 // a cada 8 horas, quando a pessoa acessar esta página, a pessoa vai gerar uma nova versão desta página\n\n  };\n}","map":{"version":3,"sources":["/home/joao/Documents/_DEV/rocketseat/nlw/aulas/podcastrnext/src/pages/index.tsx"],"names":["Home","props","console","log","episodes","getStaticProps","response","fetch","data","json","revalidate"],"mappings":";;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA,eAAe,SAASA,IAAT,CAAcC,KAAd,EAAqB;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAlB;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,C,CAEA;AACD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,eAAeC,cAAf,GAAgC;AAAE;AACrC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAA5B;AACA,QAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEA,SAAO;AACLR,IAAAA,KAAK,EAAE;AAAE;AACPG,MAAAA,QAAQ,EAAEI;AADL,KADF;AAILE,IAAAA,UAAU,EAAE,KAAK,EAAL,GAAU,CAJjB,CAIoB;;AAJpB,GAAP;AAMD","sourcesContent":["// SPA (não usar quando as informações que serão obtidas com esta estratégia precisarem estar disponíveis assim que a página é exibida para o usuário; o Crawler não vai indexar isso) \n// SSR\n// SSG (utilizar quando deseja-se cacher a página no servidor (fazer uma versão estática do site no servidor)- performance; ex.: 1 milhão de pessoas acessa a mesma página no mesmo dia => cachear site no servidor uma vez por dia)\n\nimport { useEffect } from \"react\"\n\n\n// export default function Home() {\n//   useEffect( // SPA\n//     () => {\n//       fetch('http://localhost:3333/episodes')\n//         .then(response => response.json())\n//         .then(data => console.log(data))\n//     }, // o que fazer \n//     [] // quando; \"[]\" significa que a função vai ser executada assim que o componente for exibido em tela, uma única vez\n//   )\n\n//   return (\n//     <h1>Index</h1>\n//   )\n// }\n\n\nexport default function Home(props) {\n  console.log(props.episodes);\n\n  return (\n    <h1>Index</h1>\n  )\n}\n\n // SSR\n// export async function getServerSideProps() { // executa toda vez que alguém acessar a HOME (\"/\") da aplicação \n//   const response = await fetch('http://localhost:3333/episodes');\n//   const data = await response.json();\n\n//   return {\n//     props: { // o que é retornado aqui, é repassado para o componente function Home no argumento props\n//       episodes: data,\n//     }\n//   }\n// }\n\n// SSG \nexport async function getStaticProps() { // executa toda vez que alguém acessar a HOME (\"/\") da aplicação \n    const response = await fetch('http://localhost:3333/episodes');\n    const data = await response.json();\n  \n    return {\n      props: { // o que é retornado aqui, é repassado para o componente function Home no argumento props\n        episodes: data,\n      },\n      revalidate: 60 * 60 * 8, // a cada 8 horas, quando a pessoa acessar esta página, a pessoa vai gerar uma nova versão desta página\n    }\n  }"]},"metadata":{},"sourceType":"module"}