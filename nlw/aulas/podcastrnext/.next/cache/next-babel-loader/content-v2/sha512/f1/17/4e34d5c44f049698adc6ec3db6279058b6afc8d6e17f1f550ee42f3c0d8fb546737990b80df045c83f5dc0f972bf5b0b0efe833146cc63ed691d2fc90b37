{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n// SPA (não usar quando as informações que serão obtidas com esta estratégia precisarem estar disponíveis assim que a página é exibida para o usuário; o Crawler não vai indexar isso) \n// SSR\n// SSG (SÓ FUNCIONA EM PRODUÇÃO; utilizar quando deseja-se cacher a página no servidor (fazer uma versão estática do site no servidor)- performance; ex.: 1 milhão de pessoas acessa a mesma página no mesmo dia => cachear site no servidor uma vez por dia)\n// export default function Home() {\n//   useEffect( // SPA\n//     () => {\n//       fetch('http://localhost:3333/episodes')\n//         .then(response => response.json())\n//         .then(data => console.log(data))\n//     }, // o que fazer \n//     [] // quando; \"[]\" significa que a função vai ser executada assim que o componente for exibido em tela, uma única vez\n//   )\n//   return (\n//     <h1>Index</h1>\n//   )\n// }\nexport var __N_SSG = true;\nexport default function Home(props) {\n  console.log(props.episodes);\n  return /*#__PURE__*/_jsx(\"h1\", {\n    children: \"Index\"\n  });\n} // SSR\n// export async function getServerSideProps() { // executa toda vez que alguém acessar a HOME (\"/\") da aplicação \n//   const response = await fetch('http://localhost:3333/episodes');\n//   const data = await response.json();\n//   return {\n//     props: { // o que é retornado aqui, é repassado para o componente function Home no argumento props\n//       episodes: data,\n//     }\n//   }\n// }\n// SSG \n// criar build do projeto para ver isso funcionando em produção!","map":null,"metadata":{},"sourceType":"module"}